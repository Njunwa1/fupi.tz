// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: subscription/subscription.proto

package subscription

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Subscription_CreateSubscription_FullMethodName        = "/Subscription/CreateSubscription"
	Subscription_GetUserActiveSubscription_FullMethodName = "/Subscription/GetUserActiveSubscription"
)

// SubscriptionClient is the client API for Subscription service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionClient interface {
	CreateSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	GetUserActiveSubscription(ctx context.Context, in *UserActiveSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
}

type subscriptionClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionClient(cc grpc.ClientConnInterface) SubscriptionClient {
	return &subscriptionClient{cc}
}

func (c *subscriptionClient) CreateSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, Subscription_CreateSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionClient) GetUserActiveSubscription(ctx context.Context, in *UserActiveSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, Subscription_GetUserActiveSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServer is the server API for Subscription service.
// All implementations must embed UnimplementedSubscriptionServer
// for forward compatibility
type SubscriptionServer interface {
	CreateSubscription(context.Context, *SubscriptionRequest) (*SubscriptionResponse, error)
	GetUserActiveSubscription(context.Context, *UserActiveSubscriptionRequest) (*SubscriptionResponse, error)
	mustEmbedUnimplementedSubscriptionServer()
}

// UnimplementedSubscriptionServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServer struct {
}

func (UnimplementedSubscriptionServer) CreateSubscription(context.Context, *SubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedSubscriptionServer) GetUserActiveSubscription(context.Context, *UserActiveSubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActiveSubscription not implemented")
}
func (UnimplementedSubscriptionServer) mustEmbedUnimplementedSubscriptionServer() {}

// UnsafeSubscriptionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServer will
// result in compilation errors.
type UnsafeSubscriptionServer interface {
	mustEmbedUnimplementedSubscriptionServer()
}

func RegisterSubscriptionServer(s grpc.ServiceRegistrar, srv SubscriptionServer) {
	s.RegisterService(&Subscription_ServiceDesc, srv)
}

func _Subscription_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscription_CreateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServer).CreateSubscription(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscription_GetUserActiveSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserActiveSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServer).GetUserActiveSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subscription_GetUserActiveSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServer).GetUserActiveSubscription(ctx, req.(*UserActiveSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Subscription_ServiceDesc is the grpc.ServiceDesc for Subscription service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Subscription_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Subscription",
	HandlerType: (*SubscriptionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscription",
			Handler:    _Subscription_CreateSubscription_Handler,
		},
		{
			MethodName: "GetUserActiveSubscription",
			Handler:    _Subscription_GetUserActiveSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscription/subscription.proto",
}
