// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: plan/plan.proto

package plan

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Plan_GetPlans_FullMethodName = "/Plan/GetPlans"
	Plan_GetPlan_FullMethodName  = "/Plan/GetPlan"
)

// PlanClient is the client API for Plan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanClient interface {
	GetPlans(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanResponse, error)
	GetPlan(ctx context.Context, in *PlanByIdRequest, opts ...grpc.CallOption) (*PlanResponse, error)
}

type planClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanClient(cc grpc.ClientConnInterface) PlanClient {
	return &planClient{cc}
}

func (c *planClient) GetPlans(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanResponse, error) {
	out := new(PlanResponse)
	err := c.cc.Invoke(ctx, Plan_GetPlans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) GetPlan(ctx context.Context, in *PlanByIdRequest, opts ...grpc.CallOption) (*PlanResponse, error) {
	out := new(PlanResponse)
	err := c.cc.Invoke(ctx, Plan_GetPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanServer is the server API for Plan service.
// All implementations must embed UnimplementedPlanServer
// for forward compatibility
type PlanServer interface {
	GetPlans(context.Context, *PlanRequest) (*PlanResponse, error)
	GetPlan(context.Context, *PlanByIdRequest) (*PlanResponse, error)
	mustEmbedUnimplementedPlanServer()
}

// UnimplementedPlanServer must be embedded to have forward compatible implementations.
type UnimplementedPlanServer struct {
}

func (UnimplementedPlanServer) GetPlans(context.Context, *PlanRequest) (*PlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlans not implemented")
}
func (UnimplementedPlanServer) GetPlan(context.Context, *PlanByIdRequest) (*PlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedPlanServer) mustEmbedUnimplementedPlanServer() {}

// UnsafePlanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanServer will
// result in compilation errors.
type UnsafePlanServer interface {
	mustEmbedUnimplementedPlanServer()
}

func RegisterPlanServer(s grpc.ServiceRegistrar, srv PlanServer) {
	s.RegisterService(&Plan_ServiceDesc, srv)
}

func _Plan_GetPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).GetPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plan_GetPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).GetPlans(ctx, req.(*PlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plan_GetPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).GetPlan(ctx, req.(*PlanByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Plan_ServiceDesc is the grpc.ServiceDesc for Plan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Plan",
	HandlerType: (*PlanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlans",
			Handler:    _Plan_GetPlans_Handler,
		},
		{
			MethodName: "GetPlan",
			Handler:    _Plan_GetPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plan/plan.proto",
}
